{"version":3,"sources":["Proxy.ts","EventProducer.ts","TextInput.tsx","Login.tsx","TextInputAndButton.tsx","MessageCard.tsx","RightPane.tsx","ConversationCard.tsx","LeftPane.tsx","Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["proxy","ws","inbox","WebSocket","addEventListener","e","p","JSON","parse","data","type","alert","message","dispatch","cid","channelId","conversations","find","x","lastMessages","push","conversation","packet","this","send","stringify","listeners","listener","obj","splice","findIndex","args","filter","call","Error","TextInput","state","value","props","focus","attrs","autofocus","autoFocus","onEnter","onKeyDown","keyCode","className","onChange","setState","target","onBlur","onFocus","placeholder","Component","Login","email","password","displayName","register","src","width","changeDisplayedEmail","onClick","href","preventDefault","input","toUpperCase","console","log","forceUpdate","sendPacket","staySignedIn","TextInputAndButton","textInput","React","createRef","current","ref","buttonContent","MessageCard","own","content","Date","timeStamp","toLocaleTimeString","PureComponent","RightPane","m","removeAllEventListener","text","referenceTo","contentType","name","onBack","map","key","id","senderId","user","onSend","ConversationCard","lastMessage","length","selected","onSelect","toDateString","LeftPane","tag","sendContactRequest","selectedConversation","firstMessage","c","Main","undefined","App","showLoggedIn","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","fetch","headers","response","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.26e6c07b.chunk.js","sourcesContent":["import { IncomingPacket, InboxDto, OutgoingPacket, MessageDto } from \"./chat\";\nimport { EventProducer } from \"./EventProducer\";\n\ninterface ProxyEventMap {\n    \"login\": () => void;\n    \"message\": (channelId: string, message: MessageDto) => void;\n    \"conversation\": (channelId: string) => void;\n}\n\n\nclass Proxy extends EventProducer<ProxyEventMap> {\n    private ws: WebSocket;\n    inbox: InboxDto | null = null;\n\n\n    constructor() {\n        super();\n\n        this.ws = new WebSocket(\"wss://raja.aut.bme.hu/chat/\");\n\n        this.ws.addEventListener(\"open\", () => {\n        });\n\n        this.ws.addEventListener(\"message\", e => {\n            let p = <IncomingPacket>JSON.parse(e.data);\n            switch (p.type) {\n                case \"error\":\n                    alert(p.message);\n                    break;\n                case \"login\":\n                    this.inbox = p.inbox;\n                    this.dispatch(\"login\");\n                    break;\n                case \"message\":\n                    let cid = p.channelId;\n                    this.inbox!.conversations.find(x => x.channelId === cid)?.lastMessages.push(p.message);\n                    this.dispatch(\"message\", cid, p.message);\n                    break;\n                case \"conversationAdded\":\n                    this.inbox!.conversations.push(p.conversation);\n                    this.dispatch(\"conversation\", p.conversation.channelId);\n                    break;\n            }\n        });\n\n    }\n\n    sendPacket(packet: OutgoingPacket) {\n        this.ws.send(JSON.stringify(packet));\n    }\n\n}\nexport var proxy = new Proxy();\n","export class EventProducer<M> {\n    private listeners: { type: keyof M, listener, obj?: Object }[] = [];\n\n    addEventListener<K extends keyof M>(type: K, listener: M[K], obj?: Object) {\n        this.listeners.push({ type, listener, obj });\n    }\n\n    removeEventListener<K extends keyof M>(type: K, listener: M[K]) {\n        this.listeners.splice(this.listeners.findIndex(x => x.type === type && x.listener === listener), 1);\n    }\n\n    protected dispatch(type: keyof M, ...args) {\n        for (let listener of this.listeners.filter(x => x.type === type)) {\n            listener.listener.call(listener.obj, ...args);\n        }\n    }\n\n    removeAllEventListener(obj: Object) {\n        if (!obj) {\n            throw new Error(\"Must specify object\");\n        }\n\n        this.listeners = this.listeners.filter(x => x.obj !== obj);\n    }\n\n}\n","import React, { Component } from 'react';\nimport './TextInput.css'\n\nexport interface TextInputOptions {\n    value?: string;\n    onChange?: (value: string) => void;\n    type?: \"text\" | \"password\" | \"email\";\n    placeholder?: string;\n    onEnter?: () => void;\n    autofocus?: boolean;\n};\n\nexport class TextInput extends Component<TextInputOptions>\n{\n    state = { value: this.props.value, focus: false };\n    render() {\n        let attrs = {} as any;\n        if (this.props.autofocus)\n            attrs.autoFocus = true;\n        if (this.props.onEnter)\n            attrs.onKeyDown = e => {\n                if (e.keyCode === 13)\n                    this.props.onEnter!();\n            };\n        return (\n            <div className=\"text-input\">\n                <input type={this.props.type ?? \"text\"} value={this.state.value}\n                    onChange={e => {\n                        this.setState({ value: e.target.value });\n                        this.props.onChange?.(e.target.value);\n                    }}\n                    onBlur={() => this.setState({ focus: false })}\n                    onFocus={() => this.setState({ focus: true })}\n                    {...attrs} />\n                <div className=\"focus-indicator\"></div>\n                <label className={this.state.value || this.state.focus ? \"subsided\" : \"\"}>\n                    {this.props.placeholder}\n                </label>\n            </div>);\n    }\n}\n","import React, { Component } from 'react';\nimport { proxy } from './Proxy';\nimport { TextInput } from './TextInput';\n\nexport class Login extends Component {\n    state = { email: \"\", password: \"\", displayName: \"\", register: false };\n    render() {\n        return (\n            <div className=\"login\">\n                <img src=\"logo512.png\" width=\"256\" />\n\n                <TextInput\n                    type=\"email\" placeholder=\"Email (someone@example.com)\"\n                    value={this.state.email}\n                    autofocus={true} \n                    onChange={e => this.changeDisplayedEmail(e)}\n                    onEnter={() => this.onClick()} />\n\n                {this.state.register && <TextInput\n                    type=\"text\" placeholder=\"Display Name (Agent Smith)\"\n                    value={this.state.displayName}\n                    onChange={e => this.setState({ displayName: e })}\n                    onEnter={() => this.onClick()} />}\n\n                <TextInput\n                    type=\"password\" placeholder=\"Password\"\n                    value={this.state.password}\n                    onChange={e => this.setState({ password: e })}\n                    onEnter={() => this.onClick()} />\n\n                <button type=\"button\" onClick={() => this.onClick()}>\n                    {this.state.register ? \"Register\" : \"Login\"}\n                </button>\n\n                <p>{this.state.register ? \"Switch back to \" : \"Have no account yet? Go and \"}\n                    <a href=\"\" onClick={e => { e.preventDefault(); this.setState({ register: !this.state.register }); }}>\n                        {this.state.register ? \"Login\" : \"Register\"}\n                    </a>\n                </p>\n\n                <a href=\"https://www.google.hu/search?q=privacy\">Privacy Policy</a>\n            </div>\n            );\n    }\n\n    changeDisplayedEmail(input: string) {\n        \n        if (this.state.register === false) {\n            if (input.toUpperCase() === \"P2MJBW\") {\n                console.log(input);\n                this.setState({ email: input, displayName: \"Adrian\" });\n                this.forceUpdate()\n            }\n        }\n        this.setState({ email: input });\n        \n    }\n\n    onClick() {\n        if (this.state.register) {\n            proxy.sendPacket({\n                type: \"register\", email: this.state.email, password: this.state.password,\n                displayName: this.state.displayName, staySignedIn: false\n\n            });\n        }\n        else {\n            proxy.sendPacket({\n                type: \"login\", email: this.state.email, password: this.state.password,\n                staySignedIn: false\n            });\n            \n        }\n    }\n}\n\n","import { TextInputOptions, TextInput } from \"./TextInput\";\nimport React, { Component } from \"react\";\n\nexport interface TextInputAndButtonOptions extends TextInputOptions \n{\n\tbuttonContent?: string;\n\tonClick?: (text: string) => boolean | void;\n}\n\nexport class TextInputAndButton extends Component<TextInputAndButtonOptions> \n{\n\ttextInput = React.createRef<TextInput>();\n\n\tonClick() {\n\t\tif (this.props.onClick?.( this.textInput.current?.state.value ?? \"\" )) {\n\t\t\tthis.textInput.current?.setState( { value: \"\" } );\n\t\t}\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"text-input-and-button\">\n\t\t\t\t<TextInput {...this.props} ref={ this.textInput } onEnter={() => this.onClick()} />\n\t\t\t\t<button type=\"button\" onClick={() => this.onClick()}>\n\t\t\t\t\t{this.props.buttonContent}\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n","import React, { PureComponent } from \"react\";\nimport { MessageDto } from \"./chat\";\n\nexport class MessageCard extends PureComponent<{ message: MessageDto, own: boolean }>\n{\n\trender() {\n\t\treturn (\n\t\t\t<div className={\"message-card\" + (this.props.own ? \" own\" : \"\")}>\n\t\t\t\t<div className=\"bubble\">\n\t\t\t\t\t<span className=\"text\">{this.props.message.content}</span>\n\t\t\t\t\t<span className=\"time\">\n\t\t\t\t\t\t{new Date(this.props.message.timeStamp).toLocaleTimeString()}\n\t\t\t\t\t</span>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import React, { Component } from \"react\";\nimport { ConversationDto } from \"./chat\";\nimport { proxy } from \"./Proxy\";\nimport { TextInputAndButton } from \"./TextInputAndButton\";\nimport { MessageCard } from \"./MessageCard\";\n\n\nexport class RightPane extends Component<{ conversation?: ConversationDto, onBack: () => void }>\n{\n    componentDidMount() {\n        proxy.addEventListener(\"message\", (cid, m) => {\n            if (cid === this.props.conversation?.channelId)\n                this.forceUpdate();\n        }, this);\n    }\n    componentWillUnmount() {\n        proxy.removeAllEventListener(this);\n    }\n    onSend(text: string) {\n        proxy.sendPacket({\n            type: \"message\", channelId: this.props.conversation!.channelId, referenceTo: 0\n            , contentType: 0, content: \"P:\" + text\n        });\n        return true;\n    }\n    render() {\n        return (\n            <div className=\"right-pane column\">\n                {this.props.conversation &&\n                    <>\n                        <div className=\"conversation-header\">\n                            <p>{this.props.conversation?.name}</p>\n                        </div>\n                        \n                        <div className=\"conversation-header row\">\n                            <button type=\"button\" className=\"only-narrow\"\n                                onClick={() => this.props.onBack()}>Back</button>\n                            <p>{this.props.conversation?.name}</p>\n                        </div>\n\n                        <div className=\"messages\">\n                            {this.props.conversation?.lastMessages.map(x =>\n                                <MessageCard key={x.id} message={x}\n                                    own={x.senderId === proxy.inbox?.user.id} />)}\n                        </div>\n                        <div className=\"send-message row\">\n                            <TextInputAndButton type=\"text\" placeholder=\"Type something awesome here...\"\n                                buttonContent=\"Send\" onClick={x => this.onSend(x)} />\n                        </div>\n\n                    </>\n                }\n            </div>\n        );\n    }\n}\n","import React, { Component } from \"react\";\nimport { ConversationDto } from \"./chat\";\nimport { proxy } from \"./Proxy\";\n\nexport class ConversationCard extends Component<{\n\tconversation: ConversationDto,\n\tselected: boolean,\n\tonSelect: () => void\n}>\n{\n\trender() {\n\t\tlet lastMessage = this.props.conversation.lastMessages.length > 0 ?\n\t\t\tthis.props.conversation.lastMessages[this.props.conversation.lastMessages.length - 1] : null;\n\n\t\treturn (\n\t\t\t<div className={\"conversation-card\" + (this.props.selected ? \" selected\" : \"\")}\n\t\t\t\tonClick={() => this.props.onSelect()}>\n\t\t\t\t<div className=\"row\">\n\t\t\t\t\t<span className=\"channel-name\">{this.props.conversation.name}</span>\n\t\t\t\t\t<span className=\"time\">\n\t\t\t\t\t\t{lastMessage && new Date(lastMessage.timeStamp).toDateString()}\n\t\t\t\t\t</span>\n\t\t\t\t</div>\n\t\t\t\t<span className=\"last-message\">{lastMessage?.content}</span>\n\t\t\t</div>\n\t\t);\n\t}\n\n\tcomponentDidMount() {\n\t\tproxy.addEventListener(\"message\", (cid, m) => {\n\t\t\tif (cid === this.props.conversation.channelId)\n\t\t\t\tthis.forceUpdate();\n\t\t}, this);\n\t}\n\t\n\tcomponentWillUnmount() {\n\t\tproxy.removeAllEventListener(this);\n\t}\n\n}\n","import React, { Component } from \"react\";\nimport { InboxDto, ConversationDto } from \"./chat\";\nimport { TextInputAndButton } from \"./TextInputAndButton\";\nimport { proxy } from \"./Proxy\";\nimport { ConversationCard } from \"./ConversationCard\";\n\nexport class LeftPane extends Component<{\n\tinbox: InboxDto, selectedConversation: ConversationDto | undefined,\n\tonSelect: (c: ConversationDto) => void\n}>\n{\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"left-pane\">\n\t\t\t\t<p className=\"my-tag\">My tag: {this.props.inbox.user.tag}</p>\n\t\t\t\t<TextInputAndButton type=\"text\" placeholder=\"Add user by Tag (Name#123)\"\n\t\t\t\t\tbuttonContent=\"Inv\"\n\t\t\t\t\tonClick={text => this.sendContactRequest(text)} />\n\t\t\t\t<div className=\"conversations\">\n\t\t\t\t\t{this.props.inbox.conversations.map(x =>\n\t\t\t\t\t\t<ConversationCard\n\t\t\t\t\t\t\tkey={x.channelId}\n\t\t\t\t\t\t\tconversation={x}\n\t\t\t\t\t\t\tselected={x === this.props.selectedConversation}\n\t\t\t\t\t\t\tonSelect={() => this.props.onSelect(x)} />)}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n\n\tsendContactRequest(email: string) {\n\t\tproxy.sendPacket({ type: \"contactRequest\", email, firstMessage: \"Hello\" });\n\t\treturn true;\n\t}\n\n\tcomponentDidMount() {\n\t\tproxy.addEventListener(\"conversation\", c => this.forceUpdate(), this);\n\t}\n\n\tcomponentWillUnmount() {\n\t\tproxy.removeAllEventListener(this);\n\t}\n}\n","import React, { Component } from \"react\";\nimport { ConversationDto } from \"./chat\";\nimport { proxy } from \"./Proxy\";\nimport { RightPane } from \"./RightPane\";\nimport { LeftPane } from \"./LeftPane\";\n\nexport class Main extends Component {\n    state = { selectedConversation: undefined as (ConversationDto | undefined) };\n    render() {\n        let className = \"main row \" + (this.state.selectedConversation ? \"right\" : \"left\");\n        return (\n            <div className={className}>\n                <LeftPane\n                    inbox={proxy.inbox!}\n                    selectedConversation={this.state.selectedConversation}\n                    onSelect={c => this.setState({ selectedConversation: c })} />\n                <RightPane conversation={this.state.selectedConversation}\n                    onBack={() => this.setState({ selectedConversation: undefined })} />\n            </div>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport { Login } from './Login';\nimport { Main } from './Main';\nimport { proxy } from './Proxy';\n\nexport default class App extends Component\n{\n  state = { showLoggedIn: true };\n\n  render()\n  {\n    return (\n      <div className=\"app\">\n        { this.state.showLoggedIn? <Login /> : <Main /> }\n      </div>\n    );\n  }\n  \n  componentDidMount()\n  {\n    proxy.addEventListener( \"login\", () => { this.setState( { showLoggedIn: false } ) } );\n  }\n\n \n\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}